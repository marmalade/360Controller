/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */

#include "s3eExt.h"
#include "IwDebug.h"
#include "s3eDevice.h"


#include "GamePad.h"


#ifndef S3E_EXT_SKIP_LOADER_CALL_LOCK
// For MIPs (and WP8) platform we do not have asm code for stack switching
// implemented. So we make LoaderCallStart call manually to set GlobalLock
#if defined __mips || defined S3E_ANDROID_X86 || (defined(WINAPI_FAMILY) && (WINAPI_FAMILY == WINAPI_FAMILY_PHONE_APP))
#define LOADER_CALL_LOCK
#endif
#endif

/**
 * Definitions for functions types passed to/from s3eExt interface
 */
typedef       bool(*GamePad_IsConnected_t)();
typedef       bool(*GamePad_Update_t)(float dt);
typedef      float(*GamePad_GetStick1XAxis_t)();
typedef      float(*GamePad_GetStick1YAxis_t)();
typedef      float(*GamePad_GetStick2XAxis_t)();
typedef      float(*GamePad_GetStick2YAxis_t)();
typedef      float(*GamePad_GetLeftTrigger_t)();
typedef      float(*GamePad_GetRightTrigger_t)();
typedef       bool(*GamePad_GetButtonX_t)();
typedef       bool(*GamePad_GetButtonY_t)();
typedef       bool(*GamePad_GetButtonA_t)();
typedef       bool(*GamePad_GetButtonB_t)();
typedef       bool(*GamePad_GetButtonDPadLeft_t)();
typedef       bool(*GamePad_GetButtonDPadRight_t)();
typedef       bool(*GamePad_GetButtonDPadUp_t)();
typedef       bool(*GamePad_GetButtonDPadDown_t)();
typedef       bool(*GamePad_GetButtonLShoulderDown_t)();
typedef       bool(*GamePad_GetButtonRShoulderDown_t)();
typedef       bool(*GamePad_GetButtonStart_t)();
typedef       bool(*GamePad_GetButtonSelect_t)();

/**
 * struct that gets filled in by GamePadRegister
 */
typedef struct GamePadFuncs
{
    GamePad_IsConnected_t m_GamePad_IsConnected;
    GamePad_Update_t m_GamePad_Update;
    GamePad_GetStick1XAxis_t m_GamePad_GetStick1XAxis;
    GamePad_GetStick1YAxis_t m_GamePad_GetStick1YAxis;
    GamePad_GetStick2XAxis_t m_GamePad_GetStick2XAxis;
    GamePad_GetStick2YAxis_t m_GamePad_GetStick2YAxis;
    GamePad_GetLeftTrigger_t m_GamePad_GetLeftTrigger;
    GamePad_GetRightTrigger_t m_GamePad_GetRightTrigger;
    GamePad_GetButtonX_t m_GamePad_GetButtonX;
    GamePad_GetButtonY_t m_GamePad_GetButtonY;
    GamePad_GetButtonA_t m_GamePad_GetButtonA;
    GamePad_GetButtonB_t m_GamePad_GetButtonB;
    GamePad_GetButtonDPadLeft_t m_GamePad_GetButtonDPadLeft;
    GamePad_GetButtonDPadRight_t m_GamePad_GetButtonDPadRight;
    GamePad_GetButtonDPadUp_t m_GamePad_GetButtonDPadUp;
    GamePad_GetButtonDPadDown_t m_GamePad_GetButtonDPadDown;
    GamePad_GetButtonLShoulderDown_t m_GamePad_GetButtonLShoulderDown;
    GamePad_GetButtonRShoulderDown_t m_GamePad_GetButtonRShoulderDown;
    GamePad_GetButtonStart_t m_GamePad_GetButtonStart;
    GamePad_GetButtonSelect_t m_GamePad_GetButtonSelect;
} GamePadFuncs;

static GamePadFuncs g_Ext;
static bool g_GotExt = false;
static bool g_TriedExt = false;
static bool g_TriedNoMsgExt = false;

static bool _extLoad()
{
    if (!g_GotExt && !g_TriedExt)
    {
        s3eResult res = s3eExtGetHash(0xe6a02e94, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        else
            s3eDebugAssertShow(S3E_MESSAGE_CONTINUE_STOP_IGNORE,                 "error loading extension: GamePad");

        g_TriedExt = true;
        g_TriedNoMsgExt = true;
    }

    return g_GotExt;
}

static bool _extLoadNoMsg()
{
    if (!g_GotExt && !g_TriedNoMsgExt)
    {
        s3eResult res = s3eExtGetHash(0xe6a02e94, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        g_TriedNoMsgExt = true;
        if (g_TriedExt)
            g_TriedExt = true;
    }

    return g_GotExt;
}

s3eBool GamePadAvailable()
{
    _extLoadNoMsg();
    return g_GotExt ? S3E_TRUE : S3E_FALSE;
}

bool GamePad_IsConnected()
{
    IwTrace(GAMEPAD_VERBOSE, ("calling GamePad[0] func: GamePad_IsConnected"));

    if (!_extLoad())
        return false;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    bool ret = g_Ext.m_GamePad_IsConnected();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

bool GamePad_Update(float dt)
{
    IwTrace(GAMEPAD_VERBOSE, ("calling GamePad[1] func: GamePad_Update"));

    if (!_extLoad())
        return false;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    bool ret = g_Ext.m_GamePad_Update(dt);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

float GamePad_GetStick1XAxis()
{
    IwTrace(GAMEPAD_VERBOSE, ("calling GamePad[2] func: GamePad_GetStick1XAxis"));

    if (!_extLoad())
        return 0;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    float ret = g_Ext.m_GamePad_GetStick1XAxis();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

float GamePad_GetStick1YAxis()
{
    IwTrace(GAMEPAD_VERBOSE, ("calling GamePad[3] func: GamePad_GetStick1YAxis"));

    if (!_extLoad())
        return 0;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    float ret = g_Ext.m_GamePad_GetStick1YAxis();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

float GamePad_GetStick2XAxis()
{
    IwTrace(GAMEPAD_VERBOSE, ("calling GamePad[4] func: GamePad_GetStick2XAxis"));

    if (!_extLoad())
        return 0;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    float ret = g_Ext.m_GamePad_GetStick2XAxis();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

float GamePad_GetStick2YAxis()
{
    IwTrace(GAMEPAD_VERBOSE, ("calling GamePad[5] func: GamePad_GetStick2YAxis"));

    if (!_extLoad())
        return 0;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    float ret = g_Ext.m_GamePad_GetStick2YAxis();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

float GamePad_GetLeftTrigger()
{
    IwTrace(GAMEPAD_VERBOSE, ("calling GamePad[6] func: GamePad_GetLeftTrigger"));

    if (!_extLoad())
        return 0;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    float ret = g_Ext.m_GamePad_GetLeftTrigger();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

float GamePad_GetRightTrigger()
{
    IwTrace(GAMEPAD_VERBOSE, ("calling GamePad[7] func: GamePad_GetRightTrigger"));

    if (!_extLoad())
        return 0;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    float ret = g_Ext.m_GamePad_GetRightTrigger();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

bool GamePad_GetButtonX()
{
    IwTrace(GAMEPAD_VERBOSE, ("calling GamePad[8] func: GamePad_GetButtonX"));

    if (!_extLoad())
        return false;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    bool ret = g_Ext.m_GamePad_GetButtonX();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

bool GamePad_GetButtonY()
{
    IwTrace(GAMEPAD_VERBOSE, ("calling GamePad[9] func: GamePad_GetButtonY"));

    if (!_extLoad())
        return false;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    bool ret = g_Ext.m_GamePad_GetButtonY();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

bool GamePad_GetButtonA()
{
    IwTrace(GAMEPAD_VERBOSE, ("calling GamePad[10] func: GamePad_GetButtonA"));

    if (!_extLoad())
        return false;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    bool ret = g_Ext.m_GamePad_GetButtonA();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

bool GamePad_GetButtonB()
{
    IwTrace(GAMEPAD_VERBOSE, ("calling GamePad[11] func: GamePad_GetButtonB"));

    if (!_extLoad())
        return false;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    bool ret = g_Ext.m_GamePad_GetButtonB();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

bool GamePad_GetButtonDPadLeft()
{
    IwTrace(GAMEPAD_VERBOSE, ("calling GamePad[12] func: GamePad_GetButtonDPadLeft"));

    if (!_extLoad())
        return false;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    bool ret = g_Ext.m_GamePad_GetButtonDPadLeft();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

bool GamePad_GetButtonDPadRight()
{
    IwTrace(GAMEPAD_VERBOSE, ("calling GamePad[13] func: GamePad_GetButtonDPadRight"));

    if (!_extLoad())
        return false;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    bool ret = g_Ext.m_GamePad_GetButtonDPadRight();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

bool GamePad_GetButtonDPadUp()
{
    IwTrace(GAMEPAD_VERBOSE, ("calling GamePad[14] func: GamePad_GetButtonDPadUp"));

    if (!_extLoad())
        return false;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    bool ret = g_Ext.m_GamePad_GetButtonDPadUp();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

bool GamePad_GetButtonDPadDown()
{
    IwTrace(GAMEPAD_VERBOSE, ("calling GamePad[15] func: GamePad_GetButtonDPadDown"));

    if (!_extLoad())
        return false;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    bool ret = g_Ext.m_GamePad_GetButtonDPadDown();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

bool GamePad_GetButtonLShoulderDown()
{
    IwTrace(GAMEPAD_VERBOSE, ("calling GamePad[16] func: GamePad_GetButtonLShoulderDown"));

    if (!_extLoad())
        return false;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    bool ret = g_Ext.m_GamePad_GetButtonLShoulderDown();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

bool GamePad_GetButtonRShoulderDown()
{
    IwTrace(GAMEPAD_VERBOSE, ("calling GamePad[17] func: GamePad_GetButtonRShoulderDown"));

    if (!_extLoad())
        return false;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    bool ret = g_Ext.m_GamePad_GetButtonRShoulderDown();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

bool GamePad_GetButtonStart()
{
    IwTrace(GAMEPAD_VERBOSE, ("calling GamePad[18] func: GamePad_GetButtonStart"));

    if (!_extLoad())
        return false;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    bool ret = g_Ext.m_GamePad_GetButtonStart();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

bool GamePad_GetButtonSelect()
{
    IwTrace(GAMEPAD_VERBOSE, ("calling GamePad[19] func: GamePad_GetButtonSelect"));

    if (!_extLoad())
        return false;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    bool ret = g_Ext.m_GamePad_GetButtonSelect();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}
